services:
  # ðŸš€ DATABASE MIGRATIONS SERVICE
  database-migrations:
    build:
      context: . 
      dockerfile: ./prisma/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # ðŸš€ USER SERVICE
  user-service:
    build:
      context: . 
      dockerfile: ./services/user-service/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - "5001:5000"
    env_file:
      - .env
    depends_on:
      database-migrations:
        condition: service_completed_successfully
    networks:
      - backend

  # ðŸš€ BOOKING SERVICE
  booking-service:
    build:
      context: . 
      dockerfile: ./services/booking-service/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - "4001:4001"
    env_file:
      - .env
    depends_on:
      database-migrations:
        condition: service_completed_successfully
    networks:
      - backend

  # ðŸš€ POSTGRES DATABASE
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ðŸš€ RABBITMQ MESSAGE BROKER
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=secret
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ðŸš€ REDIS CACHE
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    env_file:
      - .env
    ports:
      - "6379:6379"
    networks:
      - backend

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml
      - loki-data:/loki # âœ… Persistent storage
    networks:
      - backend

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
    networks:
      - backend
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus # âœ… Persistent storage
    networks:
      - backend
    depends_on:
      - user-service
      - booking-service
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini # âœ… Added config
    networks:
      - backend
    depends_on:
      - loki
      - prometheus

volumes:
  postgres_data:
  loki-data: # âœ… Persistent storage for logs
  grafana-storage:
  prometheus-data:

networks:
  backend:
    driver: bridge
