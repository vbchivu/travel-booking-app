services:
  # ðŸš€ DATABASE MIGRATIONS SERVICE
  database-migrations:
    build:
      context: . 
      dockerfile: ./prisma/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # ðŸš€ USER SERVICE
  user-service:
    build:
      context: . 
      dockerfile: ./services/user-service/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - '5001:5000'
    env_file:
      - .env
    depends_on:
      database-migrations:
        condition: service_completed_successfully
    networks:
      - backend

  # ðŸš€ BOOKING SERVICE
  booking-service:
    build:
      context: . 
      dockerfile: ./services/booking-service/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - '4001:4001'
    env_file:
      - .env
    depends_on:
      database-migrations:
        condition: service_completed_successfully
    networks:
      - backend

  # ðŸš€ POSTGRES DATABASE
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  # ðŸš€ RABBITMQ MESSAGE BROKER
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5

  # ðŸš€ REDIS CACHE
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    env_file:
      - .env
    ports:
      - '6379:6379'
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
